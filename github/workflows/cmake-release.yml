name: CMake-release

on:
  push:
    tags:
      - 'v*'

env:
  BUILD_TYPE: Release

permissions:
  contents: read
  actions: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        instructions:
          - avx
          - avx2

    steps:
    - uses: actions/checkout@v3
      with:
          submodules: recursive

    - name: Setup MinGW
      if: matrix.os == 'windows-latest'
      run: |
        choco install mingw -y -libwinpthread
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Configure CMake
      run: |
        if ("${{ matrix.os }}" -eq "windows-latest") {
          $env:PATH += ";C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DAVX2=${{ matrix.instructions == 'avx2' && 'ON' || 'OFF' }} -G "MinGW Makefiles"
        } else {
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DAVX2=${{ matrix.instructions == 'avx2' && 'ON' || 'OFF' }}
        }
      shell: pwsh
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Prepare binary
      run: |
        if ("${{ matrix.instructions }}" -eq "avx"){
          if ("${{ matrix.os }}" -eq "windows-latest") {
            cp ${{github.workspace}}\build\bin\chat.exe chat.exe
            mv chat.exe chat-windows-latest-avx.exe
            shasum -a 256 -b chat-windows-latest-avx.exe > shasum-chat-windows-latest-avx.sha256
          } else {
            cp ${{github.workspace}}/build/bin/chat chat
            mv chat chat-${{ matrix.os }}-${{ matrix.instructions }}
            shasum -a 256 -b chat-${{ matrix.os }}-${{ matrix.instructions }} > shasum-chat-${{ matrix.os }}-${{ matrix.instructions }}.sha256
          }
        } else {
          if ("${{ matrix.os }}" -eq "windows-latest") {
            cp ${{github.workspace}}\build\bin\chat.exe chat.exe
            mv chat.exe chat-windows-latest-avx2.exe
            shasum -a 256 -b chat-windows-latest-avx2.exe > shasum-chat-windows-latest-avx2.sha256
          } else {
            cp ${{github.workspace}}/build/bin/chat chat
            mv chat chat-${{ matrix.os }}-${{ matrix.instructions }}
            shasum -a 256 -b chat-${{ matrix.os }}-${{ matrix.instructions }} > shasum-chat-${{ matrix.os }}-${{ matrix.instructions }}.sha256
          }
        }
      shell: pwsh

    - name: Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: chat-${{ matrix.os }}-${{ matrix.instructions }}
        path: chat-${{ matrix.os }}-${{ matrix.instructions }}*

    - name: Upload shasums
      uses: actions/upload-artifact@v2
      with:
        name: shasum-chat-${{ matrix.os }}-${{ matrix.instructions }}
        path: shasum-chat-${{ matrix.os }}-${{ matrix.instructions }}*
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOY_KEY }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: Upload artifacts
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOY_KEY }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          artifacts/**/*

    - name: Checkout repository
      uses: actions/checkout@v3
      
    #
    # This part filters the CHANGELOG.md using python
    # Then it adds FILTERED_CHANGELOG.md to release notes
    #
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x

    - name: Filter CHANGELOG.md

    - uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          print("Directory contents:")
          for f in os.listdir():
              print(f)
      
    - name: Generate release notes
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOY_KEY }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body_path: FILTERED_CHANGELOG.md
        draft: false
        prerelease: false

